// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @default(uuid())
  email String @unique
  username String @unique
  name String
  bio String? @db.Text
  avatarUrl String? @db.Text
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  comments Comment[]
  likes Like[]
  saves Save[]
}

model Post {
  id String @id @default(uuid())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  content   String   @db.Text
  imageUrl  String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes Like[]
  saves Save[]

  @@index([authorId])
}

model Comment {
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  authorId String
  author User @relation(fields: [authorId], references: [id])
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([postId])
}

model Like {
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([postId, userId])
  @@index([userId])
}

model Save {
  id String @id @default(uuid())
  postId String
  post Post @relation(fields: [postId], references: [id])
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
}
